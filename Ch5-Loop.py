#range ใช้ในการกำหนดช่วงหรือขอบเขตของข้อมูลชนิดตัวเลขจำนวนเต็มที่มีค่าต่อเนื่อง
#   rangr(stop)
#   rangr(start,stop)
#   rangr(start,stop,step)
#start = ค่าเริ่มต้นซึ่งเป็นจำนวนเต็ม ติดลบได้
#stop = ค่าขอบเขตช่วงข้อมูล แต่ไม่รวมตัวมันเอง
#step = ระยะห่างของการเพิ่มหรือลดของข้อมูล หากเราใช้ฟังก์ชัน range() แบบไม่กำหนดค่า sep ช่วงข้อมูลจะเพื่มทีละ 1 โดยอัติโนมัติ

#range(1,10) #ค่า 1-9
#range(-10,100) #ค่า-10-99
#range(1.5,5.5) #>>จะ Error เนื่องจากต้องกำหนดช่วงเป็นจำนวนเต็ม
#range(100) #ค่า 0-99

r = range(0,100,10)
start = r.start
stop = r.stop
step = r.step
print(start,stop,step) #0 100 10

#===========================================================
print()
#การใช้loop แบบ for in
#for ตัวแปร in ช่วงข้อมูล:
#   คำสั่งต่างๆ

#กรณีต้องการเลข 1-5
for i in range(1,6):
    print(i)
print()
#กรณีต้องการพิมพ์เฉพาะเลขคู่ระหว่าง 1-10
for i in range(2,11,2):
    print(i)
print()
#กรณี step เป็นลบ
for i in range(-10,-100,-10):
    print(i)
print()
#==============================================================

count = 0
for n in range(1,101):
    if (n % 6 ==0) and (n % 8 == 0):
        count += 1
print(count)
print()

#==============================================================

#ใช้ลูป for เพื่อวนรับข้อมูลตัวเลข 4 จำนวนผ่านคีร์บอร์ด พร้อมบวกเพิ่มเข้าไปในผลรวม แล้วแสดงผลความและค่าเฉลี่ย
sum = 0
for i in range(1,5):
    num = int(input(f'จำนวนที่ {i}: '))
    sum += num
print('ผลรวม: ',sum)
print('ค่าเฉลี่ย: ',sum/4)
print()

#==============================================================

#หาค่าของเลขยกกำลังโดยใช้ลูป for
import math

base = float(input('เลขฐาน: '))
power = int(input('เลขชี้กำลัง(จำนวนเต็มบวก): '))

if power >= 0:
    result = 1
    for i in range(0,power):
        result *= base
    #เนื่องจาก input เป็น float จะได้เป็นทศนิยม .0 เลยทำการปรับการแสดงผลให้ตรงกับข้อมูลจริง
    if result % 1 == 0:
        result = math.trunc(result) #คืนค่าจริงของ x ถูกตัดเหลือเพียง Integral (มักจะเป็นจำนวนเต็ม ) แทน X__trunc__()

    if base % 1 == 0:
        base = math.trunc(base)

    print(f'{base}**{power} = {format(result)}')
else:
    print('กรุณาใส่เลขชี้กำลังเป็นจำนวนเต็มบวก')

print()
#สมมติ เลขฐาน=10/เลขชี้กำลัง=5
# range= 1,2,3,4
#         power
# result    0 = 1*10 = 10
# result    1 = 10*10 = 100
# result    2 = 100*10 = 1,000
# result    3 = 1000*10= 10,000
# result    4 = 10000*10= 100,000

#==============================================================

#การใช้ลูป while >>มักมีการตรวจสอบเงื่อนไขก่อนวนรอบ หากตรงตามที่กำหนด ก็จะเริ่มทำตามคำสั่งในลูปวนไปเรื่อยๆจนกว่าเงื่อนไขจะเสร็จ
x = 1
while x <= 5:
    print(x)
    x += 1  #จะทำ x = x+1 ไปเรื่อยๆ จนกว่าจะถึง 5

print()

x = 1
while x < 6 :
    print(x)
    x += 2 # x = 1,3,5

print()

#===============================================================

#ต้องการทราบว่า จะต้องสุ่มกี่ครั้ง จึงจะได้เลขที่มีค่าตั้งแต่ 0.9 ขึ้นไป
import random
x = 0
num = 0
while x < 0.9 : #ถ้ามีค่าน้อยกว่า 0.9 ให้ทำวนไป
    x = random.random() #random() แปลว่ามีช่วงระหว่าง 0-1
    num += 1

print(f'ต้องสุ่มทั้งหมด: {num} ครั้ง เพื่อให้ได้ค่าตั้งแต่ 0.9 ขึ้นไป')
print()

#===============================================================

#ถ้ารหัสคือ 1234 ให้ใช้ฟังก์ชัน input() เพื่อรับรหัสจากผู้ใช้ ซึ่งหากใส่ผิดก็ให้ใส่ใหม่จนกว่าจะใส่ค่าถูก
password = False
while not password: #ถ้าตัวแปรยังเป็น False ให้ทำวนไปเรื่อยๆ
                    # if x == False >> if not x
    code = input('กรุณาใส่รหัส >> ')
    if code == '1234' :
        password = True
print('คุณใส่รหัสถูกต้อง')
print()

#================================================================
#การใช้ลูปซ้อนกัน >> สามารถใช้ loop for หรือ while ซ้อยกัน หรือ
text = '                  สูตรคูณ\n'
text += '           *********************\n'

for i in range(1,6):
    for j in range(1,11):
        if j == 1:
            text += ''
        elif ( i * j ) < 10:
            text += '    '
        else:
            text += '   '

        text += str(i * j)

    text += '\n'
print(text)

print()
#=========================================================
#Continue เป็นคำสั่งให้วนลูปถัดไปทันที โดยไม่ทำสั่งในลูป for หรือ while ที่อยู่ถัดจ่าก continue ลงไป
sum = 0
for n in range(1,11):
    if n == 5:
        continue
    sum += n
print(sum)
#เมื่อ n=5 จะวนลูปถัดไปทันที
# 1+2+3+4+5+6+7+8+9+10 = 50
print()
#==========================================================
#การใช้คำสั่ง break >> เป็นคำสั่งให้ลูปหยุดทำงาน โดยไม่ทำคำสั่งส่วนที่เหลือภายในลูป for หรือ while และไม่วนลูกถัดไป
sum = 0
for n in range(1,11):
    sum+= n
    if n ==5:
        break
print(sum)
#1+2+3+4+5 = 15
print()
#========================================================
#EX การสร้างเกมทายตัวเลข โดยมีหลักการดังนี้
# - เมื่อเริ่มเกมให้เริ่มสร้างเลขสุ่มที่มีค่าระหว่าง 0-99
# - ใช้ลูป while หรือ for ก็ได้ เพื่อแสเง input ให้ผู้เล่นใส่ตัวเลขที่ต้องการทาย
# - ถ้าผู้เล่นใส่เลขที่มากกว่าค่าสุ่มที่ได้ ให้แจ้งว่า "น้อยกว่านี้"
# - ถ้าผู้เล่นใส่เลขที่น้อยกว่าค่าสุ่มที่ได้ ให้แจ้งว่า "มากกว่านี้"
# - ในที่นี้มีข้อกำหนเว่า ให้ทายได้ไม่เกิน 7 ครั้ง ดังนั้นจึงให้วนลูปเพื่อทายจนกว่าจะถูก(ชนะ) แต่ถ้าทายครบ 7 ครั้งแล้วยังไม่ถูก ก็ถือว่าแพ้
while not win: #ตัวไม่ชนะให้ทำวนไป
    num = int(input(f'ทายครั้งที่: {count} กรุณาใส่ตัวเลข 0-99 >> '))

    if num > number:
        message = 'น้อยกว่านี้'
    elif num < number:
        message = 'มากกว่านี้'
    elif num == number:
        message == '\nถูกต้อง'
        win = True

    print(message)

    if (not win) and (count == max_num):
        print(f'\nคุณทายครบ {max_num} ครั้งแล้ว \nเกมถูกยกเลิก')
        break
    count += 1

print()
#========================================================